def solve_n_queens(n):
    def backtrack(queens, xy_diff, xy_sum):
        nonlocal solution_found
        if solution_found:
            return
        row = len(queens)
        if row == n:
            solutions.append(queens)
            solution_found = True
            return
        for col in range(n):
            if col not in queens and row - col not in xy_diff and row + col not in xy_sum:
                backtrack(queens + [col], xy_diff + [row - col], xy_sum + [row + col])

    solutions = []
    solution_found = False
    backtrack([], [], [])
    return solutions

def print_solution(solution):
    board = []
    for col in solution:
        row = ['Q' if c == col else '-' for c in range(len(solution))]
        board.append(' '.join(row))
    print('\n'.join(board))
    print()

# Call the functions to solve and print the first solution
print("Enter no. of queens:")
user_input = int(input())
solutions = solve_n_queens(user_input)
if solutions:
    print_solution(solutions[0])
else:
    print("No solution found.")
